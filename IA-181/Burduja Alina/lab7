public class Stiva {

   static Stack<Character> stack = new Stack<>();

    static void insert_at_bottom(char x)
    {

        if(stack.isEmpty())
            stack.push(x);

        else
        {
            char a = stack.peek();
            stack.pop();
            insert_at_bottom(x);

            stack.push(a);
        }
    }

    static void reverse()
    {
        if(stack.size() > 0)
        {

            char x = stack.peek();
            stack.pop();
            reverse();

            insert_at_bottom(x);
        }
    }
    public static void main(String[] args){

        stack.push('r');
        stack.push('o');
        stack.push('y');
        stack.push('g');


        reverse();
//        Iterator<Character> itr=stack.iterator();
        
        System.out.println("Stiva inversata: " + stack);

//        while(itr.hasNext()){
//            System.out.println(itr.next());
//        }
    }

}

Conluzii: În această lucrare de laborator am făcut cunoștință cu termenul ”Colecții”. Colecţia reprezintă o realizare de tipuri abstracte (structuri) de date,
care realizează două operaţii de bază: introduce un element nou în colectie, şterge elementul din colecţie.
Colecţiile sunt unite într-o bibliotecă de clase  java.util, şi reprezinta containere pentru depozitarea şi manipularea obiectelor.
Colectii - sunt tablouri dinamice, liste legate, arbori, seturi, stive, cozi.
În clasa Collection sunt definite metode statice care lucrează cu toate colecţiile. Un alt mod de a lucra cu elementele  colecţiei este utilizarea metodelor din clasa Iterator,
care prevede un mijloc de parcurgere a conţinutului colectiei. Sarcina mea a fost să creez o Clasa Stivă bazată pe colecții.
Să introduc o secvență de caracter și să îl returnez invers, eu am lucrat cu metode statice.


